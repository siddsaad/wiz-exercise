name: CI - Build • SBOM • Scan • Push

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"] # build on version tags too
  pull_request:

jobs:
  build-scan-push:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write # OIDC to assume AWS role
      contents: read
      security-events: write # upload SARIF
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image refs
        id: img
        run: |
          echo "registry=${{ steps.ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "image=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
          echo "sha_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "version_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Build image
        run: |
          docker build \
            -t ${{ steps.img.outputs.image }}:${{ steps.img.outputs.sha_tag }} \
            -t ${{ steps.img.outputs.image }}:latest .

      - name: SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.img.outputs.image }}:latest
          output-file: sbom.spdx.json

      - name: Scan (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.img.outputs.image }}:latest
          format: sarif
          output: trivy.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          vuln-type: "os,library"
          scanners: "vuln,secret,misconfig"
          # To fail PRs on findings later, add: exit-code: '1'

      - name: Tag version (only on tag builds)
        if: ${{ steps.img.outputs.version_tag != '' }}
        run: |
          docker tag ${{ steps.img.outputs.image }}:${{ steps.img.outputs.sha_tag }} \
                     ${{ steps.img.outputs.image }}:${{ steps.img.outputs.version_tag }}

      - name: Push images
        run: |
          docker push ${{ steps.img.outputs.image }}:${{ steps.img.outputs.sha_tag }}
          docker push ${{ steps.img.outputs.image }}:latest
          if [ -n "${{ steps.img.outputs.version_tag }}" ]; then
            docker push ${{ steps.img.outputs.image }}:${{ steps.img.outputs.version_tag }}
          fi

      # (Optional) Publish the digest as job output for downstream jobs
      - name: Output digest of latest build
        id: digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.img.outputs.image }}:${{ steps.img.outputs.sha_tag }} | cut -d'@' -f2)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
